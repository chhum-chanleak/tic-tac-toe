# findMax is an example
function findMax(numbers):
  max = numbers[0]

  for each number in numbers:
    if number > max:
      max = number

  return max

--->
function createEmptyBoard():
  init boardGame
  init length

  for each number in length:
    init div 
    SET div's id TO i + 1
    SET div's class TO 'box' i+ 1
    add div TO boardGame
  ENDFOR

  return boardGame
ENDFUNCTION

--->
function getRows():
  init row1
  init row2
  init row3

  for each child in emptyBoard:
    switch(child's class):
      CASE'box 1'
          'box 2'
          'box 3' put child in row1
      ENDCASE
      CASE'box 4'
          'box 5'
          'box 6' put child in row2
      ENDCASE
      CASE'box 7'
          'box 8'
          'box 9' put child in row3
      ENDCASE
  ENDFOR

  return { row1, row2, row2 }
ENDFUNCTION

--->
function getColumns():
  init column1
  init column2
  init column3

  for each child in emptyBoard:
    switch(child's class):
      CASE'box 1'
          'box 4'
          'box 7' put child in column1
      ENDCASE
      CASE'box 2'
          'box 5'
          'box 8' put child in column2
      ENDCASE
      CASE'box 3'
          'box 6'
          'box 9' put child in column3
      ENDCASE
  ENDFOR

  return { column1, column2, column3 }
ENDFUNCTION

--->
function getMainDiagonal():
INIT mainDiagonal = []

for each child in emptyBoard:
  IF child's class = 'box 1' or 'box 5' or 
  'box 9', THEN put child in mainDiagonal
  ENDIF
ENDFOR

RETURN mainDiagonal
ENDFUNCTION
<---

---> 
FUNCTION getOffDiagonal():
INIT offDiagonal

for each child in emptyBoard:
  IF child's class = 'box 3' or 'box 5' or 'box 7'
  , THEN put child in offDiagonal
  ENDIF
ENDFOR

return offDiagonal
ENDFUNCTION
<---

--->
FUNCTION getTextContents(direction):
INIT contents = [];

FOR each content in direction's textContent:
  contents.push(content's textContent);
ENDFOR

return contents
ENDFUNCTION
<---

--->
FUNCTION hasWon(direction):

FOR each item in direction:
  IF item1 = item2 AND (item2 = item3),
  THEN RETURN true
  ENDIF
ENDFOR
RETURN false
ENDFUNCTION  
<---

->
FUNCTION handleBox(event):
PRINT box's target  
<-

->
FUNCTION addEvent(array):
FOR each item in array:
  array[i] ADD click event(handleBox)
ENDFOR
ENDFUNCTION
<-

->
FUNCTION handleDOMContentLoaded():
CALL board.createEmptyBoard()
CALL game.addEvent(board.getBoxesFromBoard)
CALL body.appendChild(board.getEmptyBoard())
ENDFUNCTION
<-

->
FUNCTION startGame():
ADD event(handleDOMContentLoaded) to document's object
ENDFUNCTION
<-

->
FUNCTION togglePlayer1Status():
IF isPlayer1 = true, THEN SET isPlayer1 = false,
OTHERWISE SET isPlayer1 = true
ENDFUNCTION
<-

<-
FUNCTION isEmpty(event):
IF target's content = '' AND (target's content NOT = 'X' OR target's content NOT = 'O'), THEN RETURN true
ENDIF
RETURN false
ENDFUNCTION
->

->
FUNCTION getDirectionsObject():
RETURN directions = {
  rows: {
    0: row1,
    1: row2,
    2: row3,
  },
  columns: {
    0: column1,
    1: column2,
    2: column3,
  },
  diagonal: {
    main: mainDiagonal,
    off: offDiagonal,
  }
};
ENDFUNCTION
<-

->
FUNCTION getNumberOfTurns():
  RETURN numberOfTurns
ENDFUNCTION
<-

->
FUNCTION checkAllDirections(directions):

  FOR each prop in item:
    PRINT item[prop]
ENDFUNCTION
->

->
FUNCTION removeEvent(nodes):
  FOR each item in nodes:
    REMOVE event from item
ENDFUNCTION
<-

->
FUNCTION isDraw():
  IF numberOfTurns = 9 AND ( checkAllDirections(getDirectionsObject()) = false) {
    RETURN true
  }
  RETURN false
ENDFUNCTION
<-

<-
FUNCTION setColorForContent():
  FOR each item in getBoxesFromBoard():
    IF item's content = 'X', THEN
      item's color = red
    ELSEIF item's content = 'O', THEN
      item's color = blue
    END
ENDFUNCTION
->

->
FUNCTION showPlayersTurn():
  INIT turn = .players-turn

  SET turn's textContent = getCurrentPlayer()
ENDFUNCTION
<-

<-
FUNCTION getWinner():
  RETURN winner;
ENDFUNCTION
->